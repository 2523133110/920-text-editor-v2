/*
 * Copyright (C) 2016 Jecelyin Peng <jecelyin@gmail.com>
 *
 * This file is part of 920 Text Editor.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.jecelyin.editor.v2.highlight.lang;

import com.jecelyin.editor.v2.highlight.LangDefine;
import com.jecelyin.editor.v2.highlight.syntax.*;
/**
 * @author Jecelyin Peng <jecelyin@gmail.com>
 */
public class CobolLang implements LangDefine {
        private PROPS PROPS1() {
        PROPS PROPS1 = new PROPS();
        PROPERTY PROPERTY1 = new PROPERTY();
        PROPERTY1.VALUE = ",+_=<>/?^&*";
        PROPERTY1.NAME = "wordBreakChars";
        PROPS1.PROPERTY = new PROPERTY[] { PROPERTY1, };

        return PROPS1;
    }

    private RULES RULES1() {
        RULES RULES1 = new RULES();
        RULES1.HIGHLIGHT_DIGITS = "TRUE";
        RULES1.IGNORE_CASE = "TRUE";
        IMPORT IMPORT1 = new IMPORT();
        IMPORT1.DELEGATE = "CT1";
        IMPORT IMPORT2 = new IMPORT();
        IMPORT2.DELEGATE = "CT2";
        IMPORT IMPORT3 = new IMPORT();
        IMPORT3.DELEGATE = "LEX";
        RULES1.IMPORT = new IMPORT[] { IMPORT1, IMPORT2, IMPORT3, };

        return RULES1;
    }

    private RULES RULES2() {
        RULES RULES1 = new RULES();
        RULES1.SET = "CT1";
        RULES1.IGNORE_CASE = "TRUE";
        SEQ_REGEXP SEQ_REGEXP1 = new SEQ_REGEXP();
        SEQ_REGEXP1.text = ".{6}[D\\- ]";
        SEQ_REGEXP1.TYPE = "COMMENT4";
        SEQ_REGEXP1.AT_LINE_START = "TRUE";
        EOL_SPAN_REGEXP EOL_SPAN_REGEXP1 = new EOL_SPAN_REGEXP();
        EOL_SPAN_REGEXP1.text = ".{6}[^/*]";
        EOL_SPAN_REGEXP1.TYPE = "INVALID";
        EOL_SPAN_REGEXP1.AT_LINE_START = "TRUE";
        EOL_SPAN_REGEXP EOL_SPAN_REGEXP2 = new EOL_SPAN_REGEXP();
        EOL_SPAN_REGEXP2.text = "(?=.{6}[*/])";
        EOL_SPAN_REGEXP2.AT_LINE_START = "TRUE";
        EOL_SPAN_REGEXP2.DELEGATE = "CTL";
        EOL_SPAN_REGEXP2.MATCH_TYPE = "RULE";
        SEQ_REGEXP SEQ_REGEXP2 = new SEQ_REGEXP();
        SEQ_REGEXP2.text = ".{1,6}";
        SEQ_REGEXP2.TYPE = "COMMENT4";
        SEQ_REGEXP2.AT_LINE_START = "TRUE";
        RULES1.SEQ_REGEXP = new SEQ_REGEXP[] { SEQ_REGEXP1, SEQ_REGEXP2, };

        RULES1.EOL_SPAN_REGEXP = new EOL_SPAN_REGEXP[] { EOL_SPAN_REGEXP1, EOL_SPAN_REGEXP2, };

        return RULES1;
    }

    private RULES RULES3() {
        RULES RULES1 = new RULES();
        RULES1.SET = "CTL";
        EOL_SPAN_REGEXP EOL_SPAN_REGEXP1 = new EOL_SPAN_REGEXP();
        EOL_SPAN_REGEXP1.text = ".{5}";
        EOL_SPAN_REGEXP1.TYPE = "COMMENT4";
        EOL_SPAN_REGEXP1.MATCH_TYPE = "CONTEXT";
        RULES1.EOL_SPAN_REGEXP = new EOL_SPAN_REGEXP[] { EOL_SPAN_REGEXP1, };

        return RULES1;
    }

    private RULES RULES4() {
        RULES RULES1 = new RULES();
        RULES1.SET = "CT2";
        RULES1.IGNORE_CASE = "TRUE";
        EOL_SPAN_REGEXP EOL_SPAN_REGEXP1 = new EOL_SPAN_REGEXP();
        EOL_SPAN_REGEXP1.text = "(.{65})";
        EOL_SPAN_REGEXP1.TYPE = "COMMENT4";
        EOL_SPAN_REGEXP1.MATCH_TYPE = "CONTEXT";
        RULES1.EOL_SPAN_REGEXP = new EOL_SPAN_REGEXP[] { EOL_SPAN_REGEXP1, };

        return RULES1;
    }

    private RULES RULES5() {
        RULES RULES1 = new RULES();
        RULES1.SET = "LEX";
        RULES1.IGNORE_CASE = "TRUE";
        SPAN SPAN1 = new SPAN();
        SPAN1.NO_LINE_BREAK = "TRUE";
        SPAN1.TYPE = "LITERAL2";
        SPAN1.ESCAPE = "\\";
        BEGIN BEGIN1 = new BEGIN();
        BEGIN1.text = "x\"";
        END END1 = new END();
        END1.text = "\"";
        SPAN1.END = new END[] { END1, };

        SPAN1.BEGIN = new BEGIN[] { BEGIN1, };

        SPAN SPAN2 = new SPAN();
        SPAN2.NO_LINE_BREAK = "TRUE";
        SPAN2.TYPE = "LITERAL1";
        SPAN2.ESCAPE = "\\";
        BEGIN BEGIN2 = new BEGIN();
        BEGIN2.text = "\"";
        END END2 = new END();
        END2.text = "\"";
        SPAN2.END = new END[] { END2, };

        SPAN2.BEGIN = new BEGIN[] { BEGIN2, };

        SPAN SPAN3 = new SPAN();
        SPAN3.NO_LINE_BREAK = "TRUE";
        SPAN3.TYPE = "LITERAL1";
        SPAN3.ESCAPE = "\\";
        BEGIN BEGIN3 = new BEGIN();
        BEGIN3.text = "'";
        END END3 = new END();
        END3.text = "'";
        SPAN3.END = new END[] { END3, };

        SPAN3.BEGIN = new BEGIN[] { BEGIN3, };

        SEQ_REGEXP SEQ_REGEXP1 = new SEQ_REGEXP();
        SEQ_REGEXP1.text = "<";
        SEQ_REGEXP1.TYPE = "OPERATOR";
        SEQ_REGEXP SEQ_REGEXP2 = new SEQ_REGEXP();
        SEQ_REGEXP2.text = "<=";
        SEQ_REGEXP2.TYPE = "OPERATOR";
        SEQ_REGEXP SEQ_REGEXP3 = new SEQ_REGEXP();
        SEQ_REGEXP3.text = ">";
        SEQ_REGEXP3.TYPE = "OPERATOR";
        SEQ_REGEXP SEQ_REGEXP4 = new SEQ_REGEXP();
        SEQ_REGEXP4.text = ">=";
        SEQ_REGEXP4.TYPE = "OPERATOR";
        SEQ_REGEXP SEQ_REGEXP5 = new SEQ_REGEXP();
        SEQ_REGEXP5.text = "\\+";
        SEQ_REGEXP5.TYPE = "OPERATOR";
        SEQ_REGEXP SEQ_REGEXP6 = new SEQ_REGEXP();
        SEQ_REGEXP6.text = "-";
        SEQ_REGEXP6.TYPE = "OPERATOR";
        SEQ_REGEXP SEQ_REGEXP7 = new SEQ_REGEXP();
        SEQ_REGEXP7.text = "/";
        SEQ_REGEXP7.TYPE = "OPERATOR";
        SEQ_REGEXP SEQ_REGEXP8 = new SEQ_REGEXP();
        SEQ_REGEXP8.text = "\\*";
        SEQ_REGEXP8.TYPE = "OPERATOR";
        SEQ_REGEXP SEQ_REGEXP9 = new SEQ_REGEXP();
        SEQ_REGEXP9.text = "\\*\\*";
        SEQ_REGEXP9.TYPE = "OPERATOR";
        SEQ_REGEXP SEQ_REGEXP10 = new SEQ_REGEXP();
        SEQ_REGEXP10.text = "%";
        SEQ_REGEXP10.TYPE = "OPERATOR";
        SEQ_REGEXP SEQ_REGEXP11 = new SEQ_REGEXP();
        SEQ_REGEXP11.text = "&";
        SEQ_REGEXP11.TYPE = "OPERATOR";
        SEQ_REGEXP SEQ_REGEXP12 = new SEQ_REGEXP();
        SEQ_REGEXP12.text = "\\|";
        SEQ_REGEXP12.TYPE = "OPERATOR";
        SEQ_REGEXP SEQ_REGEXP13 = new SEQ_REGEXP();
        SEQ_REGEXP13.text = "\\^";
        SEQ_REGEXP13.TYPE = "OPERATOR";
        SEQ_REGEXP SEQ_REGEXP14 = new SEQ_REGEXP();
        SEQ_REGEXP14.text = "~";
        SEQ_REGEXP14.TYPE = "OPERATOR";
        SPAN SPAN4 = new SPAN();
        SPAN4.NO_LINE_BREAK = "FALSE";
        SPAN4.TYPE = "COMMENT2";
        BEGIN BEGIN4 = new BEGIN();
        BEGIN4.text = "EXEC SQL";
        END END4 = new END();
        END4.text = "END-EXEC";
        SPAN4.END = new END[] { END4, };

        SPAN4.BEGIN = new BEGIN[] { BEGIN4, };

        KEYWORDS KEYWORDS1 = new KEYWORDS();
        KEYWORDS1.add("LITERAL2", new String[]{"[COPY-PREFIX]", "[COUNT]", "[DISPLAY]", "[EXECUTE]", "[PG]", "[PREFIX]", "[PROGRAM]", "[SPECIAL-PREFIX]", "[TESTCASE]", });
        KEYWORDS1.add("KEYWORD1", new String[]{"ACCEPT", "ACCESS", "ACTUAL", "ADD", "ADDRESS", "ADVANCING", "AFTER", "ALL", "ALPHABET", "ALPHABETIC", "ALPHABETIC-LOWER", "ALPHABETIC-UPPER", "ALPHANUMERIC", "ALPHANUMERIC-EDITED", "ALSO", "ALTER", "ALTERNATE", "AND", "ANY", "API", "APPLY", "ARE", "AREA", "AREAS", "ASCENDING", "ASSIGN", "AT", "AUTHOR", "AUTO", "AUTO-SKIP", "AUTOMATIC", "BACKGROUND-COLOR", "BACKGROUND-COLOUR", "BACKWARD", "BASIS", "BEEP", "BEFORE", "BEGINNING", "BELL", "BINARY", "BLANK", "BLINK", "BLOCK", "BOTTOM", "BY", "C01", "C02", "C03", "C04", "C05", "C06", "C07", "C08", "C09", "C10", "C11", "C12", "CALL", "CALL-CONVENTION", "CANCEL", "CBL", "CD", "CF", "CH", "CHAIN", "CHAINING", "CHANGED", "CHARACTER", "CHARACTERS", "CLASS", "CLOCK-UNITS", "CLOSE", "COBOL", "CODE", "CODE-SET", "COL", "COLLATING", "COLUMN", "COM-REG", "COMMA", "COMMIT", "COMMON", "COMMUNICATION", "COMP", "COMP-0", "COMP-1", "COMP-2", "COMP-3", "COMP-4", "COMP-5", "COMP-6", "COMP-X", "COMPUTATIONAL", "COMPUTATIONAL-0", "COMPUTATIONAL-1", "COMPUTATIONAL-2", "COMPUTATIONAL-3", "COMPUTATIONAL-4", "COMPUTATIONAL-5", "COMPUTATIONAL-6", "COMPUTATIONAL-X", "COMPUTE", "CONFIGURATION", "CONSOLE", "CONTAINS", "CONTENT", "CONTINUE", "CONTROL", "CONTROLS", "CONVERTING", "COPY", "CORE-INDEX", "CORR", "CORRESPONDING", "COUNT", "CRT", "CRT-UNDER", "CURRENCY", "CURRENT-DATE", "CURSOR", "CYCLE", "CYL-INDEX", "CYL-OVERFLOW", "DATA", "DATE", "DATE-COMPILED", "DATE-WRITTEN", "DAY", "DAY-OF-WEEK", "DBCS", "DE", "DEBUG", "DEBUG-CONTENTS", "DEBUG-ITEM", "DEBUG-LINE", "DEBUG-NAME", "DEBUG-SUB-1", "DEBUG-SUB-2", "DEBUG-SUB-3", "DEBUGGING", "DECIMAL-POINT", "DECLARATIVES", "DELETE", "DELIMITED", "DELIMITER", "DEPENDING", "DESCENDING", "DESTINATION", "DETAIL", "DISABLE", "DISK", "DISP", "DISPLAY", "DISPLAY-1", "DISPLAY-ST", "DIVIDE", "DIVISION", "DOWN", "DUPLICATES", "DYNAMIC", "ECHO", "EGCS", "EGI", "EJECT", "ELSE", "EMI", "EMPTY-CHECK", "ENABLE", "END", "END-ACCEPT", "END-ADD", "END-CALL", "END-CHAIN", "END-COMPUTE", "END-DELETE", "END-DISPLAY", "END-DIVIDE", "END-EVALUATE", "END-IF", "END-INVOKE", "END-MULTIPLY", "END-OF-PAGE", "END-PERFORM", "END-READ", "END-RECEIVE", "END-RETURN", "END-REWRITE", "END-SEARCH", "END-START", "END-STRING", "END-SUBTRACT", "END-UNSTRING", "END-WRITE", "ENDING", "ENTER", "ENTRY", "ENVIRONMENT", "EOL", "EOP", "EOS", "EQUAL", "EQUALS", "ERASE", "ERROR", "ESCAPE", "ESI", "EVALUATE", "EVERY", "EXAMINE", "EXCEEDS", "EXCEPTION", "EXCESS-3", "EXCLUSIVE", "EXEC", "EXECUTE", "EXHIBIT", "EXIT", "EXTEND", "EXTENDED-SEARCH", "EXTERNAL", "FACTORY", "FALSE", "FD", "FH-FCD", "FH-KEYDEF", "FILE", "FILE-CONTROL", "FILE-ID", "FILE-LIMIT", "FILE-LIMITS", "FILLER", "FINAL", "FIRST", "FIXED", "FOOTING", "FOR", "FOREGROUND-COLOR", "FOREGROUND-COLOUR", "FROM", "FULL", "FUNCTION", "GENERATE", "GIVING", "GLOBAL", "GO", "GOBACK", "GREATER", "GRID", "GROUP", "HEADING", "HIGH", "HIGH-VALUE", "HIGH-VALUES", "HIGHLIGHT", "I-O", "I-O-CONTROL", "ID", "IDENTIFICATION", "IF", "IGNORE", "IN", "INDEX", "INDEXED", "INDICATE", "INHERITING", "INITIAL", "INITIALIZE", "INITIATE", "INPUT", "INPUT-OUTPUT", "INSERT", "INSPECT", "INSTALLATION", "INTO", "INVALID", "INVOKE", "IS", "JAPANESE", "JUST", "JUSTIFIED", "KANJI", "KEPT", "KEY", "KEYBOARD", "LABEL", "LAST", "LEADING", "LEAVE", "LEFT", "LEFT-JUSTIFY", "LEFTLINE", "LENGTH", "LENGTH-CHECK", "LESS", "LIMIT", "LIMITS", "LIN", "LINAGE", "LINAGE-COUNTER", "LINE", "LINE-COUNTER", "LINES", "LINKAGE", "LOCAL-STORAGE", "LOCK", "LOCKING", "LOW", "LOW-VALUE", "LOW-VALUES", "LOWER", "LOWLIGHT", "MANUAL", "MASTER-INDEX", "MEMORY", "MERGE", "MESSAGE", "METHOD", "MODE", "MODULES", "MORE-LABELS", "MOVE", "MULTIPLE", "MULTIPLY", "NAME", "NAMED", "NATIONAL", "NATIONAL-EDITED", "NATIVE", "NCHAR", "NEGATIVE", "NEXT", "NO", "NO-ECHO", "NOMINAL", "NOT", "NOTE", "NSTD-REELS", "NULL", "NULLS", "NUMBER", "NUMERIC", "NUMERIC-EDITED", "OBJECT", "OBJECT-COMPUTER", "OBJECT-STORAGE", "OCCURS", "OF", "OFF", "OMITTED", "ON", "OOSTACKPTR", "OPEN", "OPTIONAL", "OR", "ORDER", "ORGANIZATION", "OTHER", "OTHERWISE", "OUTPUT", "OVERFLOW", "OVERLINE", "PACKED-DECIMAL", "PADDING", "PAGE", "PAGE-COUNTER", "PARAGRAPH", "PASSWORD", "PERFORM", "PF", "PH", "PIC", "PICTURE", "PLUS", "POINTER", "POS", "POSITION", "POSITIONING", "POSITIVE", "PREVIOUS", "PRINT", "PRINT-SWITCH", "PRINTER", "PRINTER-1", "PRINTING", "PRIVATE", "PROCEDURE", "PROCEDURE-POINTER", "PROCEDURES", "PROCEED", "PROCESSING", "PROGRAM", "PROGRAM-ID", "PROMPT", "PROTECTED", "PUBLIC", "PURGE", "QUEUE", "QUOTE", "QUOTES", "RANDOM", "RANGE", "RD", "READ", "READY", "RECEIVE", "RECORD", "RECORD-OVERFLOW", "RECORDING", "RECORDS", "REDEFINES", "REEL", "REFERENCE", "REFERENCES", "RELATIVE", "RELEASE", "RELOAD", "REMAINDER", "REMARKS", "REMOVAL", "RENAMES", "REORG-CRITERIA", "REPLACE", "REPLACING", "REPORT", "REPORTING", "REPORTS", "REQUIRED", "REREAD", "RERUN", "RESERVE", "RESET", "RETURN", "RETURN-CODE", "RETURNING", "REVERSE", "REVERSE-VIDEO", "REVERSED", "REWIND", "REWRITE", "RF", "RH", "RIGHT", "RIGHT-JUSTIFY", "ROLLBACK", "ROUNDED", "RUN", "S01", "S02", "S03", "S04", "S05", "SAME", "SCREEN", "SD", "SEARCH", "SECTION", "SECURE", "SECURITY", "SEEK", "SEGMENT", "SEGMENT-LIMIT", "SELECT", "SELECTIVE", "SEND", "SENTENCE", "SEPARATE", "SEQUENCE", "SEQUENTIAL", "SERVICE", "SET", "SHIFT-IN", "SHIFT-OUT", "SIGN", "SIZE", "SKIP1", "SKIP2", "SKIP3", "SORT", "SORT-CONTROL", "SORT-CORE-SIZE", "SORT-FILE-SIZE", "SORT-MERGE", "SORT-MESSAGE", "SORT-MODE-SIZE", "SORT-OPTION", "SORT-RETURN", "SOURCE", "SOURCE-COMPUTER", "SPACE", "SPACE-FILL", "SPACES", "SPECIAL-NAMES", "STANDARD", "STANDARD-1", "STANDARD-2", "START", "STATUS", "STOP", "STORE", "STRING", "SUB-QUEUE-1", "SUB-QUEUE-2", "SUB-QUEUE-3", "SUBTRACT", "SUM", "SUPER", "SUPPRESS", "SYMBOLIC", "SYNC", "SYNCHRONIZED", "SYSIN", "SYSIPT", "SYSLST", "SYSOUT", "SYSPCH", "SYSPUNCH", "TAB", "TABLE", "TALLY", "TALLYING", "TAPE", "TERMINAL", "TERMINATE", "TEST", "TEXT", "THAN", "THEN", "THROUGH", "THRU", "TIME", "TIME-OF-DAY", "TIME-OUT", "TIMEOUT", "TIMES", "TITLE", "TO", "TOP", "TOTALED", "TOTALING", "TRACE", "TRACK-AREA", "TRACK-LIMIT", "TRACKS", "TRAILING", "TRAILING-SIGN", "TRANSFORM", "TRUE", "TYPE", "TYPEDEF", "UNDERLINE", "UNEQUAL", "UNIT", "UNLOCK", "UNSTRING", "UNTIL", "UP", "UPDATE", "UPON", "UPPER", "UPSI-0", "UPSI-1", "UPSI-2", "UPSI-3", "UPSI-4", "UPSI-5", "UPSI-6", "UPSI-7", "USAGE", "USE", "USER", "USING", "VALUE", "VALUES", "VARIABLE", "VARYING", "WAIT", "WHEN", "WHEN-COMPILED", "WITH", "WORDS", "WORKING-STORAGE", "WRITE", "WRITE-ONLY", "WRITE-VERIFY", "ZERO", "ZERO-FILL", "ZEROES", "ZEROS", });
        KEYWORDS1.add("KEYWORD2", new String[]{"ACOS", "ANNUITY", "ASIN", "ATAN", "CHAR", "COS", "CURRENT-DATE", "DATE-OF-INTEGER", "DAY-OF-INTEGER", "FACTORIAL", "INTEGER", "INTEGER-OF-DATE", "INTEGER-OF-DAY", "INTEGER-PART", "LOG", "LOG10", "LOWER-CASE", "MAX", "MEAN", "MEDIAN", "MIDRANGE", "MIN", "MOD", "NUMVAL", "NUMVAL-C", "ORD", "ORD-MAX", "ORD-MIN", "PRESENT-VALUE", "RANDOM", "RANGE", "REM", "REVERSE", "SIN", "SQRT", "STANDARD-DEVIATION", "SUM", "TAN", "UPPER-CASE", "VARIANCE", "WHEN-COMPILED", });
        RULES1.SEQ_REGEXP = new SEQ_REGEXP[] { SEQ_REGEXP1, SEQ_REGEXP2, SEQ_REGEXP3, SEQ_REGEXP4, SEQ_REGEXP5, SEQ_REGEXP6, SEQ_REGEXP7, SEQ_REGEXP8, SEQ_REGEXP9, SEQ_REGEXP10, SEQ_REGEXP11, SEQ_REGEXP12, SEQ_REGEXP13, SEQ_REGEXP14, };

        RULES1.SPAN = new SPAN[] { SPAN1, SPAN2, SPAN3, SPAN4, };

        RULES1.KEYWORDS = new KEYWORDS[] { KEYWORDS1, };

        return RULES1;
    }

    public RULES[] RULES() {
        return new RULES[] {RULES1(), RULES2(), RULES3(), RULES4(), RULES5(), };
    }

    public PROPS[] PROPS() {
        return new PROPS[] {PROPS1(), };
    }


}
